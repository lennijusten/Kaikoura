import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

filter0 = pd.read_pickle('/Users/Lenni/Documents/PycharmProjects/Kaikoura/Dataset/FIlter tests/filter0.pickle')
filter1 = pd.read_pickle('/Users/Lenni/Documents/PycharmProjects/Kaikoura/Dataset/FIlter tests/filter1.pickle')
filter2 = pd.read_pickle('/Users/Lenni/Documents/PycharmProjects/Kaikoura/Dataset/FIlter tests/filter2.pickle')
filter4 = pd.read_pickle('/Users/Lenni/Documents/PycharmProjects/Kaikoura/Dataset/FIlter tests/filter4.pickle')
filter5 = pd.read_pickle('/Users/Lenni/Documents/PycharmProjects/Kaikoura/Dataset/FIlter tests/filter5.pickle')
filter6 = pd.read_pickle('/Users/Lenni/Documents/PycharmProjects/Kaikoura/Dataset/FIlter tests/filter6.pickle')

fig, ax1 = plt.subplots()
plt.title('Trade-off between RMSE and available data for PhaseNet P picks')
A, = ax1.plot(filter0['prob_threshold'], filter0['P_rms'], label='unfiltered')
a0, = ax1.plot(filter2['prob_threshold'], filter2['P_rms'], label=filter2['filter_method'][0])
b0, = ax1.plot(filter5['prob_threshold'], filter5['P_rms'], label=filter5['filter_method'][0])
c0, = ax1.plot(filter6['prob_threshold'], filter6['P_rms'], label=filter6['filter_method'][0])
ax1.grid(axis='both', alpha=0.4)
ax1.set(xlabel='PhaseNet probability threshold')
ax1.set_ylabel('RMSE')
ax1.tick_params(axis='y')
plt.ylim(0, 1)
ax2 = ax1.twinx()
ax2.set_ylabel('% of data with picks')
ax2.tick_params(axis='y')
a, = ax1.plot(filter0['prob_threshold'], filter0['nP']/filter0['n_files'], '--')
a1, = ax1.plot(filter2['prob_threshold'], filter2['nP']/filter2['n_files'], '--')
b1, = ax1.plot(filter5['prob_threshold'], filter5['nP']/filter5['n_files'], '--')
c1, = ax1.plot(filter6['prob_threshold'], filter6['nP']/filter6['n_files'], '--')
fig.tight_layout()
plt.ylim(0, 1)
plt.xlim(0, 1)
plt.legend(handles=[A, a0, b0, c0], loc='upper right')
plt.show()

fig, ax1 = plt.subplots()
plt.title('Trade-off between RMSE and available data for PhaseNet S picks')
A, = ax1.plot(filter0['prob_threshold'], filter0['S_rms'], label='unfiltered')
a0, = ax1.plot(filter2['prob_threshold'], filter2['S_rms'], label=filter2['filter_method'][0])
b0, = ax1.plot(filter5['prob_threshold'], filter5['S_rms'], label=filter5['filter_method'][0])
c0, = ax1.plot(filter6['prob_threshold'], filter6['S_rms'], label=filter6['filter_method'][0])
ax1.grid(axis='both', alpha=0.4)
ax1.set(xlabel='PhaseNet probability threshold')
ax1.set_ylabel('RMSE')
ax1.tick_params(axis='y')
plt.ylim(0, 1)
ax2 = ax1.twinx()
ax2.set_ylabel('% of data with picks')
ax2.tick_params(axis='y')
a, = ax1.plot(filter0['prob_threshold'], filter0['nS']/filter0['n_files'], '--')
a1, = ax1.plot(filter2['prob_threshold'], filter2['nS']/filter2['n_files'], '--')
b1, = ax1.plot(filter5['prob_threshold'], filter5['nS']/filter5['n_files'], '--')
c1, = ax1.plot(filter6['prob_threshold'], filter6['nS']/filter6['n_files'], '--')
fig.tight_layout()
plt.ylim(0, 1)
plt.xlim(0, 1)
plt.legend(handles=[A, a0, b0, c0], loc='upper right')
plt.show()

fig, ax1 = plt.subplots()
a, = ax1.plot(filter0['prob_threshold'], filter0['nP_out'], label='unfiltered')
a0, = ax1.plot(filter5['prob_threshold'], filter2['nP_out'], label=filter2['filter_method'][0])
b0, = ax1.plot(filter5['prob_threshold'], filter5['nP_out'], label=filter5['filter_method'][0])
c0, = ax1.plot(filter6['prob_threshold'], filter6['nP_out'], label=filter6['filter_method'][0])
ax1.grid(axis='both', alpha=0.4)
ax1.set(xlabel='PhaseNet probability threshold', ylabel='n outliers (res > 2s)')
plt.title('Number of P outliers captured at PhaseNet probability thresholds')
plt.legend(handles=[a, a0, b0, c0], loc='upper right')
plt.show()

fig, ax1 = plt.subplots()
a, = ax1.plot(filter0['prob_threshold'], filter0['nS_out'], label='unfiltered')
a1, = ax1.plot(filter2['prob_threshold'], filter2['nS_out'], label=filter2['filter_method'][0])
b1, = ax1.plot(filter5['prob_threshold'], filter5['nS_out'], label=filter5['filter_method'][0])
c1, = ax1.plot(filter6['prob_threshold'], filter6['nS_out'], label=filter6['filter_method'][0])
ax1.grid(axis='both', alpha=0.4)
ax1.set(xlabel='PhaseNet probability threshold', ylabel='n outliers (res > 2s)')
plt.title('Number of S outliers captured at PhaseNet probability thresholds')
plt.legend(handles=[a, a1, b1, c1], loc='upper right')
plt.show()

fig, ax1 = plt.subplots()
a, = ax1.plot(filter0['prob_threshold'], filter0['P_mean_res'], label='unfiltered')
a0, = ax1.plot(filter2['prob_threshold'], filter2['P_mean_res'], label=filter2['filter_method'][0])
b0, = ax1.plot(filter5['prob_threshold'], filter5['P_mean_res'], label=filter5['filter_method'][0])
c0, = ax1.plot(filter6['prob_threshold'], filter6['P_mean_res'], label=filter6['filter_method'][0])

ax1.grid(axis='both', alpha=0.4)
ax1.set(xlabel='PhaseNet probability threshold', ylabel='Mean residual (s)')
plt.title('Mean P residual by PhaseNet probability threshold')
plt.legend(handles=[a, a0, b0, c0], loc='upper left')
plt.show()

fig, ax1 = plt.subplots()
a, = ax1.plot(filter0['prob_threshold'], filter0['S_mean_res'], label='unfiltered')
a1, = ax1.plot(filter2['prob_threshold'], filter2['S_mean_res'], label=filter2['filter_method'][0])
b1, = ax1.plot(filter5['prob_threshold'], filter5['S_mean_res'], label=filter5['filter_method'][0])
c1, = ax1.plot(filter6['prob_threshold'], filter6['S_mean_res'], label=filter6['filter_method'][0])
ax1.grid(axis='both', alpha=0.4)
ax1.set(xlabel='PhaseNet probability threshold', ylabel='Mean residual (s)')
plt.title('Mean S residual by PhaseNet probability threshold')
plt.legend(handles=[a, a1, b1, c1], loc='upper left')
plt.show()

fig, ax1 = plt.subplots()
a, = ax1.plot(filter0['prob_threshold'], filter0['P_median_res'], label='unfiltered')
a0, = ax1.plot(filter2['prob_threshold'], filter2['P_median_res'], label=filter2['filter_method'][0])
b0, = ax1.plot(filter5['prob_threshold'], filter5['P_median_res'], label=filter5['filter_method'][0])
c0, = ax1.plot(filter6['prob_threshold'], filter6['P_median_res'], label=filter6['filter_method'][0])
ax1.grid(axis='both', alpha=0.4)
ax1.set(xlabel='PhaseNet probability threshold', ylabel='Median residual (s)')
plt.title('Median P residual by PhaseNet probability threshold')
plt.legend(handles=[a, a0, b0, c0], loc='upper left')
plt.show()

fig, ax1 = plt.subplots()
a, = ax1.plot(filter0['prob_threshold'], filter0['S_median_res'], label='unfiltered')
a1, = ax1.plot(filter2['prob_threshold'], filter2['S_median_res'], label=filter2['filter_method'][0])
b1, = ax1.plot(filter5['prob_threshold'], filter5['S_median_res'], label=filter5['filter_method'][0])
c1, = ax1.plot(filter6['prob_threshold'], filter6['S_median_res'], label=filter6['filter_method'][0])
ax1.grid(axis='both', alpha=0.4)
ax1.set(xlabel='PhaseNet probability threshold', ylabel='Median residual (s)')
plt.title('Median S residual by PhaseNet probability threshold')
plt.legend(handles=[a, a1, b1, c1], loc='upper left')
plt.show()